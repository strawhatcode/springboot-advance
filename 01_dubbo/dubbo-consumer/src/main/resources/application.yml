dubbo:
  application:
    name: consumer  #消费者名称
    architecture:
  registry:
    address: zookeeper://192.168.229.130:2181 #注册中心地址


server:
  port: 9100   #消费者端口号
#dubbo:
#  #应用级别配置
#  application:
#    name: consumer        #[服务治理] *必填，服务提供者或者消费者的名称
#    version: 1.0.0        #[服务治理] 服务的版本号,消费者根据版本号调用对应的服务
#    owner: who            #[服务治理] 服务的所有者，写这个服务的人
#    organization: BU      #[服务治理] 服务的组织，写这个服务的部门或小组
#    architecture:         #[服务治理] 服务的架构
#    environment: dev      #[服务治理] 服务的环境，如：dev、test、production
#    compiler: javassist   #[性能优化] 服务的java编译器，如jdk、javassist
#    logger: slf4j         #[性能优化] 日志的输入方式，如slf4j、jlc、log4j、jdk
#    dump-directory:       #保存线程垃圾的目录
#    qos-enable: false     #是否启用qos治理
#    qos-port:             #监听qos的端口号
#    qos-accept-foreign-ip: false  #是否允许外部ip访问qos治理
#  #注册中心配置
#  registry:
#    address: 127.0.0.1    #[服务发现] *必填 注册中心地址，【可以与protocol、port合并成 zookeeper://127.0.0.1:2181】
#    protocol: zookeeper   #[服务发现] *必填 使用的注册中心，如：zookeeper、multicast、redis、simple。默认zookeeper
#    port: 2181            #[服务发现] 注册中心的端口号，默认2181
#    client: zkclient      #[服务发现] 注册中心使用的客户端，如curator、zkclient。默认zkclient
#    username:             #[服务治理] 登录注册中心的帐号，如有设置要填
#    password:             #[服务治理] 登录注册中心的密码，如有设置要填
#    transporter:          #[性能调优] 网络传输类型，如mina、netty。默认netty
#    server:               #[性能调优] 服务端实现类型，如mina、netty。默认netty
#    cluster:              #[性能调优] 集群
#    group:                #[服务治理] 注册中心的组
#    version:              #[服务治理] 注册中心版本
#    timeout:              #[性能调优] 向注册中心发送请求超时时间，单位毫秒
#    session:              #[性能调优] 会话的超时时间，单位毫秒
#    file: filename.log    #[服务治理] 保存注册中心的地址和服务，多个注册中心不能共用一个file
#    check: false          #[服务治理] 是否在注册中心启动时检测注册中心是否可用
#    dynamic: true         #[服务治理] 是否动态启动注册中心
#    register: true        #[服务治理] 是否将服务注册到注册中心
#    subscribe: true       #[服务治理] 是否订阅注册中心中的服务
#  #协议配置
#  protocol:
#    name: dubbo           #[性能调优] *必填 使用的协议，如dubbo、rmi、hessian、http。默认dubbo
#    port: 20880           #[服务治理] 使用协议的端口号。默认：dubbo--20880、rim--1099、hessian--80、http--80
#    host:                 #[服务治理] 协议的地址，默认查找本机ip
#    contextpath:          #[服务治理] 上下文路径
#    threadpool: fixed     #[性能调优] 线程池类型，如：fixed、cached。默认fixed
#    corethreads:          #[性能调优] 核心线程大小
#    threads:              #[性能调优] 线程池大小(固定)
#    iothreads:            #[性能调优] io线程池大小(固定)
#    queues:               #[性能调优] 线程池队列长度
#    accepts:              #[性能调优] 服务提供者最大接受连接数
#    codec: dubbo          #[性能调优] 协议编码方式
#    serialization: hessian2 #[性能调优] 序列化方式，如：dubbo--hessian2、rmi--java、http--json
#    charset: UTF-8        #[性能调优] 序列化编码
#    payload: 88388608     #[性能调优] 请求及响应数据包大小，88388608=8M，单位字节
#    buffer: 8192          #[性能调优] 网络读写缓存大小，单位字节
#    heartbeat:            #[性能调优] 心跳间隔，心跳：用来检测连接是否断开，每x毫秒发一次心跳来检查，单位毫秒
#    accesslog:            #[服务治理] 访问日志
#    transporter:          #[性能调优] 协议的服务端和客户端实现类型
#    exchanger:            #[性能调优] 信息交换方式
#    dispatcher:           #[性能调优] 协议的信息派发模式，用于指定线程模式，如：all，direct, message, execution, connection
#    telnet:               #[服务治理] 支持telnet命令，多个命令用逗号隔开
#    status:               #[服务治理] 状态检查
#    register: true        #[服务治理] 是否注册到注册中心
#  #服务提供者常用的配置
#  provider:
#    version: 1.0.0        #[服务治理] 服务的版本号
#    group:                #[服务治理] 服务分组，同一个服务不同实现时使用
#    delay: 0              #[性能调优] 延迟服务注册的时间，单位毫秒
#    retries: 2            #[性能调优] 调用服务失败时重试的次数，默认2次
#    weight: 100           #[性能调优] 服务的权重
#    accepts:              #[性能调优] 服务允许最大连接数
#    actives:              #[性能调优] 服务允许最大并发调用
#    cluster: failover     #[性能调优] 集群方式
#    connections: 0        #[性能调优] 服务连接限制，0表示分享连接，否者定义连接委托给当前服务
#    loadbalance: random   #[性能调优] 负载均衡方式
#    threadpool: fixed     #[性能调优] 线程池类型
#    threads:              #[性能调优] 线程大小(固定)
#    timeout: 1000         #[性能调优] 调用服务时连接超时时间，单位毫秒
#    filter:               #[性能调优] 调用服务时，使用的拦截器名称，多个用逗号隔开
#  #消费者常用的配置
#  consumer:
#    version: 1.0.0        #[服务治理] 调用服务时要与服务版本号一样
#    timeout: 1000         #[性能调优] 调用服务时超时时间，单位毫秒
#    cluster: failover     #[性能调优] 集群类型
#    threadpool: fixed     #[性能调优] 线程池类型
#    threads:              #[性能调优] 线程大小
#    cache:                #[服务治理] 已调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache
#    async: false          #[性能调优] 是否使用异步，不可靠异步，只忽略返回值，不造成阻塞
#    check: true           #[服务治理] 调用服务时检查连接是否可用
#    connections: 0        #[性能调优] 服务连接限制，0表示分享连接，否者定义连接委托给当前服务
#    cluter: failover      #[性能调优] 集群方式
#    forks:                #[性能调优] 当集群方式为forking时可以设置forks的大小
#    generic: false        #[服务治理] 是否使用通用接口
#    loadbalance: radom    #[性能调优] 负载均衡方式
#    listener:             #[服务治理] 消费者引用监听器的名称，多个用逗号分隔
#    lazy: true            #[服务治理] 懒创建连接
#    meta-data:            #[性能调优] 元数据
#    owner:                #[服务治理] 写消费者的人
#    retries: 2            #[性能调优] 调用服务失败后重试的次数，默认2次
#  #扫描包
#  scan:
#    base-packages:        #扫描服务提供者的service包和消费者的包，多个用逗号分隔

