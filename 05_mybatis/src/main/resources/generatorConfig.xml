<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--
        context：上下文，可配置多个
            id：（必须）上下文标识，要唯一
            defaultModelType：（可选）默认模型类型(生成实体类的类型)
                conditional：（默认）如果表中只有一个字段则不会单独生成一个实体类，而是并入到基本实体类中
                flat：一个表生成一个实体类
                hierarchical：主键分一个实体类，BLOB类型(如果有)的字段分一个实体类，其余字段分一个实体类，生成器会自动创建继承关系
            targetRuntime：（可选）生成代码的运行时环境
                MyBatis3：（默认）会生成sample
                MyBatis3Simple：不会生成sample
                MyBatis3DynamicSql：如果使用此运行环境，那么defaultModelType无论设置什么都是flat，映射器只使用注解方式。
    -->
    <context id="mycontext" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!--
            property：数据库分隔符
                javaFileEncoding：java文件编码
        -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--
            commentGenerator：注释生成器
                suppressDate：日期注释，false(默认)则生成日期注释，true则不生成日期注释
                addRemarkComments：数据库表和列的注释，false(默认)则不生成列和表注释，true反之
                suppressAllComments：所有注释，false(默认)则生成所有注释，true反之
        -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="addRemarkComments" value="false"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接：驱动类、链接地址、用户名、密码-->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://127.0.0.1:3306/testshiro?characterEncoding=utf8&amp;serverTimezone=UTC"
                userId="root"
                password="123456">
            <!--<property name="nullCatalogMeansCurrent" value="true"/>-->
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制,默认false-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的实体类所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="com.hat.mybatis.bean"
                            targetProject="src/main/java">

            <!-- 是否允许子包，即targetPackage.schemaName.tableName，默认false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 ，默认false-->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作，默认false-->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法，默认false-->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
        </sqlMapGenerator>

        <!-- 生成mapper接口的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="com.hat.mybatis.mapper"
                             targetProject="src/main/java" type="XMLMAPPER">
        </javaClientGenerator>

        <!-- 数据表进行生成操作 tableName:表名，可以使用sql通配符; domainObjectName:对应的实体类名，不设置则按照表名创建 -->
        <!-- %：所有表；table标签可以选择生成哪些sql语句，详情：http://mybatis.org/generator/configreference/table.html-->
        <table tableName="user_info" domainObjectName="UserInfo"/>
    </context>

</generatorConfiguration>